
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033f8  080033f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f8  080033f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  0800340c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800340c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a83  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001542  00000000  00000000  00029abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029db7  00000000  00000000  0002c120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070ec  00000000  00000000  00055ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001074c8  00000000  00000000  0005cfc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016448b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002384  00000000  00000000  00164508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080033a0 	.word	0x080033a0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080033a0 	.word	0x080033a0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa36 	bl	8000672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f837 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f911 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f8ab 	bl	8000368 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int LEDState = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(b00bs_GPIO_Port, b00bs_Pin) == 1) {
 8000216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021a:	4815      	ldr	r0, [pc, #84]	; (8000270 <main+0x74>)
 800021c:	f001 fbfa 	bl	8001a14 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b01      	cmp	r3, #1
 8000224:	d1f7      	bne.n	8000216 <main+0x1a>
		  LEDState = !LEDState;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	bf0c      	ite	eq
 800022c:	2301      	moveq	r3, #1
 800022e:	2300      	movne	r3, #0
 8000230:	b2db      	uxtb	r3, r3
 8000232:	607b      	str	r3, [r7, #4]

		  if (LEDState == 0) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d106      	bne.n	8000248 <main+0x4c>
			  HAL_GPIO_WritePin(LED_GReeN_GPIO_Port, LED_GReeN_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <main+0x78>)
 8000242:	f001 fbff 	bl	8001a44 <HAL_GPIO_WritePin>
 8000246:	e008      	b.n	800025a <main+0x5e>
		  }
		  else if (LEDState == 1 ) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d105      	bne.n	800025a <main+0x5e>
			  HAL_GPIO_WritePin(LED_GReeN_GPIO_Port, LED_GReeN_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000254:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0x78>)
 8000256:	f001 fbf5 	bl	8001a44 <HAL_GPIO_WritePin>
		  }

		  while(HAL_GPIO_ReadPin(b00bs_GPIO_Port, b00bs_Pin) == 1) {
 800025a:	bf00      	nop
 800025c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <main+0x74>)
 8000262:	f001 fbd7 	bl	8001a14 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	d0f7      	beq.n	800025c <main+0x60>
	  if (HAL_GPIO_ReadPin(b00bs_GPIO_Port, b00bs_Pin) == 1) {
 800026c:	e7d3      	b.n	8000216 <main+0x1a>
 800026e:	bf00      	nop
 8000270:	48000800 	.word	0x48000800
 8000274:	48000400 	.word	0x48000400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0bc      	sub	sp, #240	; 0xf0
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f882 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2294      	movs	r2, #148	; 0x94
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 f874 	bl	8003390 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ac:	f001 fc02 	bl	8001ab4 <HAL_PWREx_ControlVoltageScaling>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x42>
  {
    Error_Handler();
 80002b6:	f000 f90b 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ba:	2310      	movs	r3, #16
 80002bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002cc:	2360      	movs	r3, #96	; 0x60
 80002ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fc8d 	bl	8001bfc <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002e8:	f000 f8f2 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f2:	2300      	movs	r3, #0
 80002f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 f899 	bl	8002448 <HAL_RCC_ClockConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800031c:	f000 f8d8 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000324:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000326:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800032a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000332:	2301      	movs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 8000336:	231e      	movs	r3, #30
 8000338:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800033e:	2302      	movs	r3, #2
 8000340:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800034a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4618      	mov	r0, r3
 8000350:	f002 faf2 	bl	8002938 <HAL_RCCEx_PeriphCLKConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800035a:	f000 f8b9 	bl	80004d0 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	37f0      	adds	r7, #240	; 0xf0
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036e:	463b      	mov	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
 800037c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <MX_ADC1_Init+0xbc>)
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <MX_ADC1_Init+0xc0>)
 8000382:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000384:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_ADC1_Init+0xbc>)
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_ADC1_Init+0xbc>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_ADC1_Init+0xbc>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000396:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_ADC1_Init+0xbc>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC1_Init+0xbc>)
 800039e:	2204      	movs	r2, #4
 80003a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <MX_ADC1_Init+0xbc>)
 80003e0:	f000 fb5c 	bl	8000a9c <HAL_ADC_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80003ea:	f000 f871 	bl	80004d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_ADC1_Init+0xc4>)
 80003f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	2306      	movs	r3, #6
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003fa:	237f      	movs	r3, #127	; 0x7f
 80003fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fe:	2304      	movs	r3, #4
 8000400:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	463b      	mov	r3, r7
 8000408:	4619      	mov	r1, r3
 800040a:	4806      	ldr	r0, [pc, #24]	; (8000424 <MX_ADC1_Init+0xbc>)
 800040c:	f000 fc90 	bl	8000d30 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000416:	f000 f85b 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000028 	.word	0x20000028
 8000428:	50040000 	.word	0x50040000
 800042c:	c7520000 	.word	0xc7520000

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_GPIO_Init+0x94>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <MX_GPIO_Init+0x94>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_GPIO_Init+0x94>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_GPIO_Init+0x94>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <MX_GPIO_Init+0x94>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_GPIO_Init+0x94>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GReeN_GPIO_Port, LED_GReeN_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <MX_GPIO_Init+0x98>)
 800047e:	f001 fae1 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : b00bs_Pin */
  GPIO_InitStruct.Pin = b00bs_Pin;
 8000482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(b00bs_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_GPIO_Init+0x9c>)
 8000498:	f001 f92a 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GReeN_Pin */
  GPIO_InitStruct.Pin = LED_GReeN_Pin;
 800049c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GReeN_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_GPIO_Init+0x98>)
 80004b6:	f001 f91b 	bl	80016f0 <HAL_GPIO_Init>

}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000400 	.word	0x48000400
 80004cc:	48000800 	.word	0x48000800

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x6>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x44>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_MspInit+0x44>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <HAL_MspInit+0x44>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_MspInit+0x44>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	6593      	str	r3, [r2, #88]	; 0x58
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_ADC_MspInit+0x38>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d10b      	bne.n	800054a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_ADC_MspInit+0x3c>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <HAL_ADC_MspInit+0x3c>)
 8000538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_ADC_MspInit+0x3c>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	50040000 	.word	0x50040000
 800055c:	40021000 	.word	0x40021000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f8b6 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <SystemInit+0x64>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <SystemInit+0x64>)
 80005c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <SystemInit+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a13      	ldr	r2, [pc, #76]	; (800061c <SystemInit+0x68>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <SystemInit+0x68>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <SystemInit+0x68>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <SystemInit+0x68>)
 80005e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <SystemInit+0x68>)
 80005ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <SystemInit+0x68>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <SystemInit+0x68>)
 80005f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <SystemInit+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SystemInit+0x64>)
 8000606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060a:	609a      	str	r2, [r3, #8]
#endif
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	40021000 	.word	0x40021000

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000624:	f7ff ffc6 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000628:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800062a:	e003      	b.n	8000634 <LoopCopyDataInit>

0800062c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800062e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000630:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000632:	3104      	adds	r1, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000638:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800063a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800063c:	d3f6      	bcc.n	800062c <CopyDataInit>
	ldr	r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000640:	e002      	b.n	8000648 <LoopFillZerobss>

08000642 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000642:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000644:	f842 3b04 	str.w	r3, [r2], #4

08000648 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <LoopForever+0x16>)
	cmp	r2, r3
 800064a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800064c:	d3f9      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064e:	f002 fe7b 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fdd3 	bl	80001fc <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000658:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800065c:	08003400 	.word	0x08003400
	ldr	r0, =_sdata
 8000660:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000664:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800066c:	20000094 	.word	0x20000094

08000670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_IRQHandler>

08000672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f001 f803 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f80e 	bl	80006a4 <HAL_InitTick>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e001      	b.n	8000698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000694:	f7ff ff20 	bl	80004d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000698:	79fb      	ldrb	r3, [r7, #7]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_InitTick+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d023      	beq.n	8000700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_InitTick+0x70>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_InitTick+0x6c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f801 	bl	80016d6 <HAL_SYSTICK_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10f      	bne.n	80006fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d809      	bhi.n	80006f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f000 ffd9 	bl	800169e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <HAL_InitTick+0x74>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e007      	b.n	8000704 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e004      	b.n	8000704 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e001      	b.n	8000704 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008
 8000714:	20000000 	.word	0x20000000
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x20>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_IncTick+0x24>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008
 8000740:	20000090 	.word	0x20000090

08000744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <HAL_GetTick+0x14>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000090 	.word	0x20000090

0800075c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	609a      	str	r2, [r3, #8]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	431a      	orrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	609a      	str	r2, [r3, #8]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3360      	adds	r3, #96	; 0x60
 80007d6:	461a      	mov	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LL_ADC_SetOffset+0x44>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	4313      	orrs	r3, r2
 80007f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007fc:	bf00      	nop
 80007fe:	371c      	adds	r7, #28
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	03fff000 	.word	0x03fff000

0800080c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3360      	adds	r3, #96	; 0x60
 800081a:	461a      	mov	r2, r3
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3360      	adds	r3, #96	; 0x60
 8000848:	461a      	mov	r2, r3
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	431a      	orrs	r2, r3
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	431a      	orrs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	615a      	str	r2, [r3, #20]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3330      	adds	r3, #48	; 0x30
 80008a4:	461a      	mov	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	f003 030c 	and.w	r3, r3, #12
 80008b0:	4413      	add	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	211f      	movs	r1, #31
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	401a      	ands	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	0e9b      	lsrs	r3, r3, #26
 80008cc:	f003 011f 	and.w	r1, r3, #31
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	431a      	orrs	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008e0:	bf00      	nop
 80008e2:	371c      	adds	r7, #28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3314      	adds	r3, #20
 80008fc:	461a      	mov	r2, r3
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	0e5b      	lsrs	r3, r3, #25
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	4413      	add	r3, r2
 800090a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	0d1b      	lsrs	r3, r3, #20
 8000914:	f003 031f 	and.w	r3, r3, #31
 8000918:	2107      	movs	r1, #7
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	401a      	ands	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	0d1b      	lsrs	r3, r3, #20
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	431a      	orrs	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000936:	bf00      	nop
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0318 	and.w	r3, r3, #24
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000968:	40d9      	lsrs	r1, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	400b      	ands	r3, r1
 800096e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	0007ffff 	.word	0x0007ffff

0800098c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800099c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6093      	str	r3, [r2, #8]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009c4:	d101      	bne.n	80009ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80009e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a14:	d101      	bne.n	8000a1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d101      	bne.n	8000a40 <LL_ADC_IsEnabled+0x18>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <LL_ADC_IsEnabled+0x1a>
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d101      	bne.n	8000a66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d101      	bne.n	8000a8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e12d      	b.n	8000d12 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d109      	bne.n	8000ad8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fd2b 	bl	8000520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff67 	bl	80009b0 <LL_ADC_IsDeepPowerDownEnabled>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d004      	beq.n	8000af2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff4d 	bl	800098c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff82 	bl	8000a00 <LL_ADC_IsInternalRegulatorEnabled>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d113      	bne.n	8000b2a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff66 	bl	80009d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b0c:	4b83      	ldr	r3, [pc, #524]	; (8000d1c <HAL_ADC_Init+0x280>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	099b      	lsrs	r3, r3, #6
 8000b12:	4a83      	ldr	r2, [pc, #524]	; (8000d20 <HAL_ADC_Init+0x284>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	099b      	lsrs	r3, r3, #6
 8000b1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b1c:	e002      	b.n	8000b24 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f9      	bne.n	8000b1e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff66 	bl	8000a00 <LL_ADC_IsInternalRegulatorEnabled>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10d      	bne.n	8000b56 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f043 0210 	orr.w	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4a:	f043 0201 	orr.w	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff77 	bl	8000a4e <LL_ADC_REG_IsConversionOngoing>
 8000b60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 80c8 	bne.w	8000d00 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 80c4 	bne.w	8000d00 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b80:	f043 0202 	orr.w	r2, r3, #2
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff4b 	bl	8000a28 <LL_ADC_IsEnabled>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10b      	bne.n	8000bb0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b98:	4862      	ldr	r0, [pc, #392]	; (8000d24 <HAL_ADC_Init+0x288>)
 8000b9a:	f7ff ff45 	bl	8000a28 <LL_ADC_IsEnabled>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	485f      	ldr	r0, [pc, #380]	; (8000d28 <HAL_ADC_Init+0x28c>)
 8000bac:	f7ff fdd6 	bl	800075c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7e5b      	ldrb	r3, [r3, #25]
 8000bb4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000bc0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000bc6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d106      	bne.n	8000bec <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	3b01      	subs	r3, #1
 8000be4:	045b      	lsls	r3, r3, #17
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d009      	beq.n	8000c08 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <HAL_ADC_Init+0x290>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	69b9      	ldr	r1, [r7, #24]
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff14 	bl	8000a4e <LL_ADC_REG_IsConversionOngoing>
 8000c26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff21 	bl	8000a74 <LL_ADC_INJ_IsConversionOngoing>
 8000c32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d140      	bne.n	8000cbc <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d13d      	bne.n	8000cbc <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e1b      	ldrb	r3, [r3, #24]
 8000c48:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c4a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c52:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c62:	f023 0306 	bic.w	r3, r3, #6
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	69b9      	ldr	r1, [r7, #24]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d118      	bne.n	8000cac <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c84:	f023 0304 	bic.w	r3, r3, #4
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c90:	4311      	orrs	r1, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c96:	4311      	orrs	r1, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f042 0201 	orr.w	r2, r2, #1
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	e007      	b.n	8000cbc <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	691a      	ldr	r2, [r3, #16]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10c      	bne.n	8000cde <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f023 010f 	bic.w	r1, r3, #15
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
 8000cdc:	e007      	b.n	8000cee <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 020f 	bic.w	r2, r2, #15
 8000cec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f023 0303 	bic.w	r3, r3, #3
 8000cf6:	f043 0201 	orr.w	r2, r3, #1
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	659a      	str	r2, [r3, #88]	; 0x58
 8000cfe:	e007      	b.n	8000d10 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d04:	f043 0210 	orr.w	r2, r3, #16
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	053e2d63 	.word	0x053e2d63
 8000d24:	50040000 	.word	0x50040000
 8000d28:	50040300 	.word	0x50040300
 8000d2c:	fff0c007 	.word	0xfff0c007

08000d30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b6      	sub	sp, #216	; 0xd8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_ConfigChannel+0x22>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e3d4      	b.n	80014fc <HAL_ADC_ConfigChannel+0x7cc>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe75 	bl	8000a4e <LL_ADC_REG_IsConversionOngoing>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 83b9 	bne.w	80014de <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d824      	bhi.n	8000dbe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	3b02      	subs	r3, #2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d81b      	bhi.n	8000db6 <HAL_ADC_ConfigChannel+0x86>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <HAL_ADC_ConfigChannel+0x54>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000d95 	.word	0x08000d95
 8000d88:	08000d9d 	.word	0x08000d9d
 8000d8c:	08000da5 	.word	0x08000da5
 8000d90:	08000dad 	.word	0x08000dad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	220c      	movs	r2, #12
 8000d98:	605a      	str	r2, [r3, #4]
          break;
 8000d9a:	e011      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2212      	movs	r2, #18
 8000da0:	605a      	str	r2, [r3, #4]
          break;
 8000da2:	e00d      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2218      	movs	r2, #24
 8000da8:	605a      	str	r2, [r3, #4]
          break;
 8000daa:	e009      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db2:	605a      	str	r2, [r3, #4]
          break;
 8000db4:	e004      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2206      	movs	r2, #6
 8000dba:	605a      	str	r2, [r3, #4]
          break;
 8000dbc:	e000      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000dbe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f7ff fd61 	bl	8000894 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fe39 	bl	8000a4e <LL_ADC_REG_IsConversionOngoing>
 8000ddc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe45 	bl	8000a74 <LL_ADC_INJ_IsConversionOngoing>
 8000dea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000dee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 81c1 	bne.w	800117a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 81bc 	bne.w	800117a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0a:	d10f      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fd68 	bl	80008ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fd22 	bl	800086e <LL_ADC_SetSamplingTimeCommonConfig>
 8000e2a:	e00e      	b.n	8000e4a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f7ff fd57 	bl	80008ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd12 	bl	800086e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00a      	beq.n	8000e82 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6919      	ldr	r1, [r3, #16]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e7c:	f7ff fca2 	bl	80007c4 <LL_ADC_SetOffset>
 8000e80:	e17b      	b.n	800117a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fcbf 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10a      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x17e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fcb4 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	0e9b      	lsrs	r3, r3, #26
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	e01e      	b.n	8000eec <HAL_ADC_ConfigChannel+0x1bc>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fca9 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000edc:	2320      	movs	r3, #32
 8000ede:	e004      	b.n	8000eea <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <HAL_ADC_ConfigChannel+0x1d4>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0e9b      	lsrs	r3, r3, #26
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	e018      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x206>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000f28:	2320      	movs	r3, #32
 8000f2a:	e004      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f30:	fab3 f383 	clz	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d106      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc78 	bl	8000838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fc5c 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x244>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fc51 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	0e9b      	lsrs	r3, r3, #26
 8000f6e:	f003 021f 	and.w	r2, r3, #31
 8000f72:	e01e      	b.n	8000fb2 <HAL_ADC_ConfigChannel+0x282>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fc46 	bl	800080c <LL_ADC_GetOffsetChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	e004      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x29a>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	0e9b      	lsrs	r3, r3, #26
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	e018      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x2cc>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	e004      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d106      	bne.n	800100e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fc15 	bl	8000838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2102      	movs	r1, #2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fbf9 	bl	800080c <LL_ADC_GetOffsetChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10a      	bne.n	800103a <HAL_ADC_ConfigChannel+0x30a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fbee 	bl	800080c <LL_ADC_GetOffsetChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	0e9b      	lsrs	r3, r3, #26
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	e01e      	b.n	8001078 <HAL_ADC_ConfigChannel+0x348>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2102      	movs	r1, #2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fbe3 	bl	800080c <LL_ADC_GetOffsetChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800105c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001068:	2320      	movs	r3, #32
 800106a:	e004      	b.n	8001076 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800106c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001080:	2b00      	cmp	r3, #0
 8001082:	d105      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x360>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0e9b      	lsrs	r3, r3, #26
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	e016      	b.n	80010be <HAL_ADC_ConfigChannel+0x38e>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80010a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80010a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80010b0:	2320      	movs	r3, #32
 80010b2:	e004      	b.n	80010be <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80010b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80010be:	429a      	cmp	r2, r3
 80010c0:	d106      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2102      	movs	r1, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fbb4 	bl	8000838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2103      	movs	r1, #3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fb98 	bl	800080c <LL_ADC_GetOffsetChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10a      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x3cc>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2103      	movs	r1, #3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb8d 	bl	800080c <LL_ADC_GetOffsetChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	0e9b      	lsrs	r3, r3, #26
 80010f6:	f003 021f 	and.w	r2, r3, #31
 80010fa:	e017      	b.n	800112c <HAL_ADC_ConfigChannel+0x3fc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2103      	movs	r1, #3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb82 	bl	800080c <LL_ADC_GetOffsetChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001116:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800111e:	2320      	movs	r3, #32
 8001120:	e003      	b.n	800112a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x414>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0e9b      	lsrs	r3, r3, #26
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	e011      	b.n	8001168 <HAL_ADC_ConfigChannel+0x438>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001154:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800115c:	2320      	movs	r3, #32
 800115e:	e003      	b.n	8001168 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001168:	429a      	cmp	r2, r3
 800116a:	d106      	bne.n	800117a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	2103      	movs	r1, #3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb5f 	bl	8000838 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fc52 	bl	8000a28 <LL_ADC_IsEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8140 	bne.w	800140c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	461a      	mov	r2, r3
 800119a:	f7ff fbd3 	bl	8000944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a8f      	ldr	r2, [pc, #572]	; (80013e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 8131 	bne.w	800140c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10b      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x4a2>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0e9b      	lsrs	r3, r3, #26
 80011c0:	3301      	adds	r3, #1
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	bf94      	ite	ls
 80011ca:	2301      	movls	r3, #1
 80011cc:	2300      	movhi	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	e019      	b.n	8001206 <HAL_ADC_ConfigChannel+0x4d6>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80011e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011e2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80011e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80011ea:	2320      	movs	r3, #32
 80011ec:	e003      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80011ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	bf94      	ite	ls
 8001200:	2301      	movls	r3, #1
 8001202:	2300      	movhi	r3, #0
 8001204:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001206:	2b00      	cmp	r3, #0
 8001208:	d079      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x4f6>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0e9b      	lsrs	r3, r3, #26
 800121c:	3301      	adds	r3, #1
 800121e:	069b      	lsls	r3, r3, #26
 8001220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001224:	e015      	b.n	8001252 <HAL_ADC_ConfigChannel+0x522>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001236:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800123e:	2320      	movs	r3, #32
 8001240:	e003      	b.n	800124a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	069b      	lsls	r3, r3, #26
 800124e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x542>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	3301      	adds	r3, #1
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	e017      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x572>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800128a:	2320      	movs	r3, #32
 800128c:	e003      	b.n	8001296 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800128e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3301      	adds	r3, #1
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	ea42 0103 	orr.w	r1, r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10a      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x598>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e9b      	lsrs	r3, r3, #26
 80012b8:	3301      	adds	r3, #1
 80012ba:	f003 021f 	and.w	r2, r3, #31
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	051b      	lsls	r3, r3, #20
 80012c6:	e018      	b.n	80012fa <HAL_ADC_ConfigChannel+0x5ca>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80012d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80012da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80012e0:	2320      	movs	r3, #32
 80012e2:	e003      	b.n	80012ec <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80012e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	f003 021f 	and.w	r2, r3, #31
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012fa:	430b      	orrs	r3, r1
 80012fc:	e081      	b.n	8001402 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001306:	2b00      	cmp	r3, #0
 8001308:	d107      	bne.n	800131a <HAL_ADC_ConfigChannel+0x5ea>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0e9b      	lsrs	r3, r3, #26
 8001310:	3301      	adds	r3, #1
 8001312:	069b      	lsls	r3, r3, #26
 8001314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001318:	e015      	b.n	8001346 <HAL_ADC_ConfigChannel+0x616>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001332:	2320      	movs	r3, #32
 8001334:	e003      	b.n	800133e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	069b      	lsls	r3, r3, #26
 8001342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x636>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0e9b      	lsrs	r3, r3, #26
 8001358:	3301      	adds	r3, #1
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	e017      	b.n	8001396 <HAL_ADC_ConfigChannel+0x666>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	61fb      	str	r3, [r7, #28]
  return result;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800137e:	2320      	movs	r3, #32
 8001380:	e003      	b.n	800138a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3301      	adds	r3, #1
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	ea42 0103 	orr.w	r1, r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10d      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x692>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0e9b      	lsrs	r3, r3, #26
 80013ac:	3301      	adds	r3, #1
 80013ae:	f003 021f 	and.w	r2, r3, #31
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3b1e      	subs	r3, #30
 80013ba:	051b      	lsls	r3, r3, #20
 80013bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c0:	e01e      	b.n	8001400 <HAL_ADC_ConfigChannel+0x6d0>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	613b      	str	r3, [r7, #16]
  return result;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d104      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80013da:	2320      	movs	r3, #32
 80013dc:	e006      	b.n	80013ec <HAL_ADC_ConfigChannel+0x6bc>
 80013de:	bf00      	nop
 80013e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	f003 021f 	and.w	r2, r3, #31
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1e      	subs	r3, #30
 80013fa:	051b      	lsls	r3, r3, #20
 80013fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001400:	430b      	orrs	r3, r1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fa70 	bl	80008ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_ADC_ConfigChannel+0x7d4>)
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06b      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001418:	483b      	ldr	r0, [pc, #236]	; (8001508 <HAL_ADC_ConfigChannel+0x7d8>)
 800141a:	f7ff f9c5 	bl	80007a8 <LL_ADC_GetCommonPathInternalCh>
 800141e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a39      	ldr	r2, [pc, #228]	; (800150c <HAL_ADC_ConfigChannel+0x7dc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d126      	bne.n	800147a <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800142c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d120      	bne.n	800147a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a34      	ldr	r2, [pc, #208]	; (8001510 <HAL_ADC_ConfigChannel+0x7e0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d156      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144a:	4619      	mov	r1, r3
 800144c:	482e      	ldr	r0, [pc, #184]	; (8001508 <HAL_ADC_ConfigChannel+0x7d8>)
 800144e:	f7ff f998 	bl	8000782 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_ADC_ConfigChannel+0x7e4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	099b      	lsrs	r3, r3, #6
 8001458:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_ADC_ConfigChannel+0x7e8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	099a      	lsrs	r2, r3, #6
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800146a:	e002      	b.n	8001472 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3b01      	subs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001478:	e03a      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_ADC_ConfigChannel+0x7ec>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d113      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x77c>
 8001484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10d      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_ADC_ConfigChannel+0x7e0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12a      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800149a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800149e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a2:	4619      	mov	r1, r3
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <HAL_ADC_ConfigChannel+0x7d8>)
 80014a6:	f7ff f96c 	bl	8000782 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80014aa:	e021      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <HAL_ADC_ConfigChannel+0x7f0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d11c      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_ADC_ConfigChannel+0x7e0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d111      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <HAL_ADC_ConfigChannel+0x7d8>)
 80014d8:	f7ff f953 	bl	8000782 <LL_ADC_SetCommonPathInternalCh>
 80014dc:	e008      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80014f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	37d8      	adds	r7, #216	; 0xd8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	80080000 	.word	0x80080000
 8001508:	50040300 	.word	0x50040300
 800150c:	c7520000 	.word	0xc7520000
 8001510:	50040000 	.word	0x50040000
 8001514:	20000000 	.word	0x20000000
 8001518:	053e2d63 	.word	0x053e2d63
 800151c:	cb840000 	.word	0xcb840000
 8001520:	80000001 	.word	0x80000001

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff47 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff5c 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffb0 	bl	8001644 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e166      	b.n	80019ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8158 	beq.w	80019c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d00b      	beq.n	8001738 <HAL_GPIO_Init+0x48>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172c:	2b11      	cmp	r3, #17
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b12      	cmp	r3, #18
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0201 	and.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0xea>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d123      	bne.n	8001822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	6939      	ldr	r1, [r7, #16]
 800181e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0203 	and.w	r2, r3, #3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80b2 	beq.w	80019c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6613      	str	r3, [r2, #96]	; 0x60
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 8001872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187c:	4a5c      	ldr	r2, [pc, #368]	; (80019f0 <HAL_GPIO_Init+0x300>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018a6:	d02b      	beq.n	8001900 <HAL_GPIO_Init+0x210>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x304>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d025      	beq.n	80018fc <HAL_GPIO_Init+0x20c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x308>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01f      	beq.n	80018f8 <HAL_GPIO_Init+0x208>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_GPIO_Init+0x30c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d019      	beq.n	80018f4 <HAL_GPIO_Init+0x204>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_GPIO_Init+0x310>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x200>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_GPIO_Init+0x314>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1fc>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x318>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x31c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1f4>
 80018e0:	2307      	movs	r3, #7
 80018e2:	e00e      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018e4:	2308      	movs	r3, #8
 80018e6:	e00c      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018e8:	2306      	movs	r3, #6
 80018ea:	e00a      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018ec:	2305      	movs	r3, #5
 80018ee:	e008      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e006      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e004      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_GPIO_Init+0x212>
 8001900:	2300      	movs	r3, #0
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	0092      	lsls	r2, r2, #2
 800190a:	4093      	lsls	r3, r2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001912:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x300>)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_GPIO_Init+0x320>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196e:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_GPIO_Init+0x320>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_GPIO_Init+0x320>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_GPIO_Init+0x320>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f ae91 	bne.w	8001700 <HAL_GPIO_Init+0x10>
  }
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000c00 	.word	0x48000c00
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48001400 	.word	0x48001400
 8001a08:	48001800 	.word	0x48001800
 8001a0c:	48001c00 	.word	0x48001c00
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d102      	bne.n	8001a8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	e00b      	b.n	8001aa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9a:	d102      	bne.n	8001aa2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa0:	e000      	b.n	8001aa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001aa2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d141      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d131      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae8:	4a41      	ldr	r2, [pc, #260]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2232      	movs	r2, #50	; 0x32
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	3301      	adds	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b06:	e002      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d102      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d158      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e057      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b44:	e04d      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4c:	d141      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d131      	bne.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2232      	movs	r2, #50	; 0x32
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b92:	e002      	b.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba6:	d102      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f2      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d112      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e011      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bd0:	e007      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f000 bc16 	b.w	800243c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c10:	4ba0      	ldr	r3, [pc, #640]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c1a:	4b9e      	ldr	r3, [pc, #632]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80e4 	beq.w	8001dfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4c>
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	f040 808b 	bne.w	8001d56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 8087 	bne.w	8001d56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_OscConfig+0x64>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e3ed      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_RCC_OscConfig+0x7e>
 8001c70:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c78:	e005      	b.n	8001c86 <HAL_RCC_OscConfig+0x8a>
 8001c7a:	4b86      	ldr	r3, [pc, #536]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d223      	bcs.n	8001cd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fd90 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e3ce      	b.n	800243c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9e:	4b7d      	ldr	r3, [pc, #500]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7c      	ldr	r2, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4977      	ldr	r1, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4972      	ldr	r1, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e025      	b.n	8001d1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	496a      	ldr	r1, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4965      	ldr	r1, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fd50 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e38e      	b.n	800243c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1e:	f000 fcbf 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8001d22:	4601      	mov	r1, r0
 8001d24:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a5a      	ldr	r2, [pc, #360]	; (8001e98 <HAL_RCC_OscConfig+0x29c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x2a0>)
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_RCC_OscConfig+0x2a4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fcae 	bl	80006a4 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d052      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	e372      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d032      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fceb 	bl	8000744 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d72:	f7fe fce7 	bl	8000744 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e35b      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	493a      	ldr	r1, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	4935      	ldr	r1, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
 8001dc2:	e01a      	b.n	8001dfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fcb8 	bl	8000744 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fcb4 	bl	8000744 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e328      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1dc>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d073      	beq.n	8001eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x21c>
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d10e      	bne.n	8001e30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d063      	beq.n	8001eec <HAL_RCC_OscConfig+0x2f0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d15f      	bne.n	8001eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e305      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d106      	bne.n	8001e48 <HAL_RCC_OscConfig+0x24c>
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0x288>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x270>
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x288>
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fc5a 	bl	8000744 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e92:	e010      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2ba>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080033b8 	.word	0x080033b8
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fc4e 	bl	8000744 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e2c2      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	4baf      	ldr	r3, [pc, #700]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2a8>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fc3e 	bl	8000744 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fc3a 	bl	8000744 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e2ae      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ede:	4ba5      	ldr	r3, [pc, #660]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2d0>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d060      	beq.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x310>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d116      	bne.n	8001f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f0c:	4b99      	ldr	r3, [pc, #612]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x328>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e28b      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b93      	ldr	r3, [pc, #588]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	4990      	ldr	r1, [pc, #576]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	e040      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d023      	beq.n	8001f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f42:	4b8c      	ldr	r3, [pc, #560]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a8b      	ldr	r2, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fbf9 	bl	8000744 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7fe fbf5 	bl	8000744 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e269      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b82      	ldr	r3, [pc, #520]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b7f      	ldr	r3, [pc, #508]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	497c      	ldr	r1, [pc, #496]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e018      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a79      	ldr	r2, [pc, #484]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fbd5 	bl	8000744 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fbd1 	bl	8000744 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e245      	b.n	800243c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb0:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03c      	beq.n	8002042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01c      	beq.n	800200a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	4a67      	ldr	r2, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fbb0 	bl	8000744 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fbac 	bl	8000744 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e220      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffa:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
 8002008:	e01b      	b.n	8002042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7fe fb93 	bl	8000744 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002022:	f7fe fb8f 	bl	8000744 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e203      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ef      	bne.n	8002022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a6 	beq.w	800219c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10d      	bne.n	800207c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a43      	ldr	r2, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
 800206c:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002078:	2301      	movs	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x57c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d118      	bne.n	80020ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_OscConfig+0x57c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <HAL_RCC_OscConfig+0x57c>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002094:	f7fe fb56 	bl	8000744 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7fe fb52 	bl	8000744 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1c6      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_RCC_OscConfig+0x57c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d8>
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d2:	e024      	b.n	800211e <HAL_RCC_OscConfig+0x522>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d110      	bne.n	80020fe <HAL_RCC_OscConfig+0x502>
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fc:	e00f      	b.n	800211e <HAL_RCC_OscConfig+0x522>
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fb0d 	bl	8000744 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fb09 	bl	8000744 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e17b      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x578>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ed      	beq.n	800212e <HAL_RCC_OscConfig+0x532>
 8002152:	e01a      	b.n	800218a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe faf6 	bl	8000744 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215a:	e00f      	b.n	800217c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe faf2 	bl	8000744 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d906      	bls.n	800217c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e164      	b.n	800243c <HAL_RCC_OscConfig+0x840>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800217c:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1e8      	bne.n	800215c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218a:	7ffb      	ldrb	r3, [r7, #31]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4ba3      	ldr	r3, [pc, #652]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4aa2      	ldr	r2, [pc, #648]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03c      	beq.n	8002222 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01c      	beq.n	80021ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021b0:	4b9b      	ldr	r3, [pc, #620]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80021b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b6:	4a9a      	ldr	r2, [pc, #616]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe fac0 	bl	8000744 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c8:	f7fe fabc 	bl	8000744 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e130      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021da:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ef      	beq.n	80021c8 <HAL_RCC_OscConfig+0x5cc>
 80021e8:	e01b      	b.n	8002222 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80021ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f0:	4a8b      	ldr	r2, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe faa3 	bl	8000744 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002202:	f7fe fa9f 	bl	8000744 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e113      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ef      	bne.n	8002202 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8107 	beq.w	800243a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	2b02      	cmp	r3, #2
 8002232:	f040 80cb 	bne.w	80023cc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	429a      	cmp	r2, r3
 8002248:	d12c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	3b01      	subs	r3, #1
 8002256:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d123      	bne.n	80022a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d11b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d113      	bne.n	80022a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d109      	bne.n	80022a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d06d      	beq.n	8002380 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d068      	beq.n	800237c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0ba      	b.n	800243c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a55      	ldr	r2, [pc, #340]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d2:	f7fe fa37 	bl	8000744 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fa33 	bl	8000744 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0a7      	b.n	800243c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f8:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x828>)
 80022fe:	4013      	ands	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002308:	3a01      	subs	r2, #1
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002312:	0212      	lsls	r2, r2, #8
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231a:	0852      	lsrs	r2, r2, #1
 800231c:	3a01      	subs	r2, #1
 800231e:	0552      	lsls	r2, r2, #21
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002326:	0852      	lsrs	r2, r2, #1
 8002328:	3a01      	subs	r2, #1
 800232a:	0652      	lsls	r2, r2, #25
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002332:	06d2      	lsls	r2, r2, #27
 8002334:	430a      	orrs	r2, r1
 8002336:	493a      	ldr	r1, [pc, #232]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800233c:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a37      	ldr	r2, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002354:	f7fe f9f6 	bl	8000744 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe f9f2 	bl	8000744 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e066      	b.n	800243c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237a:	e05e      	b.n	800243a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e05d      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d156      	bne.n	800243a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023a4:	f7fe f9ce 	bl	8000744 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe f9ca 	bl	8000744 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e03e      	b.n	800243c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x7b0>
 80023ca:	e036      	b.n	800243a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d031      	beq.n	8002436 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023f0:	f023 0303 	bic.w	r3, r3, #3
 80023f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x824>)
 80023fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe f99d 	bl	8000744 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	e00c      	b.n	8002428 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe f999 	bl	8000744 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d905      	bls.n	8002428 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e00d      	b.n	800243c <HAL_RCC_OscConfig+0x840>
 8002420:	40021000 	.word	0x40021000
 8002424:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x848>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ec      	bne.n	800240e <HAL_RCC_OscConfig+0x812>
 8002434:	e001      	b.n	800243a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e10f      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b86      	ldr	r3, [pc, #536]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4984      	ldr	r1, [pc, #528]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0f7      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8089 	beq.w	80025b0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d133      	bne.n	800250e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	4b79      	ldr	r3, [pc, #484]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0e4      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024b6:	f000 f9d7 	bl	8002868 <RCC_GetSysClockFreqFromPLLSource>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_RCC_ClockConfig+0x248>)
 80024be:	429a      	cmp	r2, r3
 80024c0:	d955      	bls.n	800256e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024c2:	4b72      	ldr	r3, [pc, #456]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ce:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d6:	4a6d      	ldr	r2, [pc, #436]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e044      	b.n	800256e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03e      	beq.n	800256e <HAL_RCC_ClockConfig+0x126>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d13a      	bne.n	800256e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002500:	4a62      	ldr	r2, [pc, #392]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002506:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e02f      	b.n	800256e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0ac      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	4b57      	ldr	r3, [pc, #348]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0a0      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253e:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e098      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800254e:	f000 f8a7 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_RCC_ClockConfig+0x248>)
 8002556:	429a      	cmp	r2, r3
 8002558:	d909      	bls.n	800256e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800255a:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002568:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4944      	ldr	r1, [pc, #272]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe f8e0 	bl	8000744 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe f8dc 	bl	8000744 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e070      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4930      	ldr	r1, [pc, #192]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a2c      	ldr	r2, [pc, #176]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 80025dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025e0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d210      	bcs.n	8002612 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 020f 	bic.w	r2, r3, #15
 80025f8:	4923      	ldr	r1, [pc, #140]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e036      	b.n	8002680 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4918      	ldr	r1, [pc, #96]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4910      	ldr	r1, [pc, #64]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002650:	f000 f826 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8002654:	4601      	mov	r1, r0
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <HAL_RCC_ClockConfig+0x24c>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa21 f303 	lsr.w	r3, r1, r3
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x250>)
 800266e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x254>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe f815 	bl	80006a4 <HAL_InitTick>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	04c4b400 	.word	0x04c4b400
 8002694:	080033b8 	.word	0x080033b8
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11e      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026d4:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026fc:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d102      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e004      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d101      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d133      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0xa4>
 800273e:	2b03      	cmp	r3, #3
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0xaa>
 8002742:	e005      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002746:	617b      	str	r3, [r7, #20]
      break;
 8002748:	e005      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800274c:	617b      	str	r3, [r7, #20]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	617b      	str	r3, [r7, #20]
      break;
 8002754:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	3301      	adds	r3, #1
 8002762:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	fb02 f203 	mul.w	r2, r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0e5b      	lsrs	r3, r3, #25
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002796:	69bb      	ldr	r3, [r7, #24]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3724      	adds	r7, #36	; 0x24
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	080033c8 	.word	0x080033c8
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027cc:	f7ff f952 	bl	8001a74 <HAL_PWREx_GetVoltageRange>
 80027d0:	6178      	str	r0, [r7, #20]
 80027d2:	e014      	b.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a21      	ldr	r2, [pc, #132]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027ec:	f7ff f942 	bl	8001a74 <HAL_PWREx_GetVoltageRange>
 80027f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002804:	d10b      	bne.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d913      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2ba0      	cmp	r3, #160	; 0xa0
 8002810:	d902      	bls.n	8002818 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002812:	2302      	movs	r3, #2
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	e00d      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002818:	2301      	movs	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e00a      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b7f      	cmp	r3, #127	; 0x7f
 8002822:	d902      	bls.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002824:	2302      	movs	r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e004      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d101      	bne.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 020f 	bic.w	r2, r3, #15
 800283c:	4909      	ldr	r1, [pc, #36]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	40022000 	.word	0x40022000

08002868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d118      	bne.n	80028b0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e005      	b.n	80028a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d002      	beq.n	80028c6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80028c4:	e005      	b.n	80028d2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028c8:	613b      	str	r3, [r7, #16]
    break;
 80028ca:	e005      	b.n	80028d8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028ce:	613b      	str	r3, [r7, #16]
    break;
 80028d0:	e002      	b.n	80028d8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	613b      	str	r3, [r7, #16]
    break;
 80028d6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	fb02 f203 	mul.w	r2, r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	0e5b      	lsrs	r3, r3, #25
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	3301      	adds	r3, #1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002918:	683b      	ldr	r3, [r7, #0]
}
 800291a:	4618      	mov	r0, r3
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	080033c8 	.word	0x080033c8
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002940:	2300      	movs	r3, #0
 8002942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002944:	2300      	movs	r3, #0
 8002946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03d      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d00b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d804      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002968:	e01d      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800296a:	2b60      	cmp	r3, #96	; 0x60
 800296c:	d01e      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d01c      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002972:	e018      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002974:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002980:	e015      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fafd 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002992:	e00c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3320      	adds	r3, #32
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fbe4 	bl	8003168 <RCCEx_PLLSAI2_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	74fb      	strb	r3, [r7, #19]
      break;
 80029aa:	e000      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80029ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b4:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ba:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	4973      	ldr	r1, [pc, #460]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029ca:	e001      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d042      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e4:	d00f      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80029e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ea:	d805      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f4:	d017      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80029f6:	e01f      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80029f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fc:	d01f      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d01c      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a04:	e018      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a12:	e015      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fab4 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a24:	e00c      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3320      	adds	r3, #32
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fb9b 	bl	8003168 <RCCEx_PLLSAI2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a3c:	e000      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a46:	4b52      	ldr	r3, [pc, #328]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	494e      	ldr	r1, [pc, #312]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a5c:	e001      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 809f 	beq.w	8002bae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4a40      	ldr	r2, [pc, #256]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
 8002a96:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab2:	f7fd fe47 	bl	8000744 <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ab8:	e009      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fd fe43 	bl	8000744 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d902      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	74fb      	strb	r3, [r7, #19]
        break;
 8002acc:	e005      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ef      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15b      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01f      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d019      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d016      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fd fe02 	bl	8000744 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	e00b      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fd fdfe 	bl	8000744 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d902      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	74fb      	strb	r3, [r7, #19]
            break;
 8002b5a:	e006      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ec      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b88:	e008      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9c:	7c7b      	ldrb	r3, [r7, #17]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4ba0      	ldr	r3, [pc, #640]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	4a9f      	ldr	r2, [pc, #636]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bba:	4b9a      	ldr	r3, [pc, #616]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f023 0203 	bic.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	4996      	ldr	r1, [pc, #600]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bdc:	4b91      	ldr	r3, [pc, #580]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 020c 	bic.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	498e      	ldr	r1, [pc, #568]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	4985      	ldr	r1, [pc, #532]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	497d      	ldr	r1, [pc, #500]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	4974      	ldr	r1, [pc, #464]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	496c      	ldr	r1, [pc, #432]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c94:	4963      	ldr	r1, [pc, #396]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb6:	495b      	ldr	r1, [pc, #364]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	4952      	ldr	r1, [pc, #328]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	494a      	ldr	r1, [pc, #296]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0e:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	4941      	ldr	r1, [pc, #260]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	4939      	ldr	r1, [pc, #228]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	4930      	ldr	r1, [pc, #192]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7c:	60d3      	str	r3, [r2, #12]
 8002d7e:	e011      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f8f9 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d04d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d108      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc0:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dca:	e012      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e06:	60d3      	str	r3, [r2, #12]
 8002e08:	e020      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e12:	d109      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
 8002e20:	e014      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2101      	movs	r1, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f8a5 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d028      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e66:	4947      	ldr	r1, [pc, #284]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e78:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e82:	60d3      	str	r3, [r2, #12]
 8002e84:	e011      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f876 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01e      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb6:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	492f      	ldr	r1, [pc, #188]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f851 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f06:	f023 0204 	bic.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f10:	491c      	ldr	r1, [pc, #112]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2a:	f023 0218 	bic.w	r2, r3, #24
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	490a      	ldr	r1, [pc, #40]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b70      	ldr	r3, [pc, #448]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00e      	beq.n	8002fc0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d103      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d13f      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	e03c      	b.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d00c      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x5a>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d013      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0x6c>
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d120      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fd0:	4b61      	ldr	r3, [pc, #388]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11d      	bne.n	8003018 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe0:	e01a      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e013      	b.n	800301c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ff4:	4b58      	ldr	r3, [pc, #352]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003000:	4b55      	ldr	r3, [pc, #340]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003010:	e006      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      break;
 8003016:	e004      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003018:	bf00      	nop
 800301a:	e002      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003020:	bf00      	nop
    }

    if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d108      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f023 0203 	bic.w	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4948      	ldr	r1, [pc, #288]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 8086 	bne.w	800314e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003042:	4b45      	ldr	r3, [pc, #276]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a44      	ldr	r2, [pc, #272]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800304c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304e:	f7fd fb79 	bl	8000744 <HAL_GetTick>
 8003052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003054:	e009      	b.n	800306a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003056:	f7fd fb75 	bl	8000744 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d902      	bls.n	800306a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	73fb      	strb	r3, [r7, #15]
        break;
 8003068:	e005      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ef      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d168      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d113      	bne.n	80030aa <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003082:	4b35      	ldr	r3, [pc, #212]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	4b35      	ldr	r3, [pc, #212]	; (800315c <RCCEx_PLLSAI1_Config+0x1d4>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	0211      	lsls	r1, r2, #8
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68d2      	ldr	r2, [r2, #12]
 8003094:	06d2      	lsls	r2, r2, #27
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6852      	ldr	r2, [r2, #4]
 800309c:	3a01      	subs	r2, #1
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	430a      	orrs	r2, r1
 80030a2:	492d      	ldr	r1, [pc, #180]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	610b      	str	r3, [r1, #16]
 80030a8:	e02d      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d115      	bne.n	80030dc <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	0211      	lsls	r1, r2, #8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6912      	ldr	r2, [r2, #16]
 80030c2:	0852      	lsrs	r2, r2, #1
 80030c4:	3a01      	subs	r2, #1
 80030c6:	0552      	lsls	r2, r2, #21
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6852      	ldr	r2, [r2, #4]
 80030ce:	3a01      	subs	r2, #1
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	430a      	orrs	r2, r1
 80030d4:	4920      	ldr	r1, [pc, #128]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]
 80030da:	e014      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6952      	ldr	r2, [r2, #20]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0652      	lsls	r2, r2, #25
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6852      	ldr	r2, [r2, #4]
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	430a      	orrs	r2, r1
 8003100:	4915      	ldr	r1, [pc, #84]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 800310c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003110:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fd fb17 	bl	8000744 <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003118:	e009      	b.n	800312e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311a:	f7fd fb13 	bl	8000744 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	73fb      	strb	r3, [r7, #15]
          break;
 800312c:	e005      	b.n	800313a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ef      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <RCCEx_PLLSAI1_Config+0x1d0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	07ff800f 	.word	0x07ff800f
 8003160:	ff9f800f 	.word	0xff9f800f
 8003164:	f9ff800f 	.word	0xf9ff800f

08003168 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003176:	4b70      	ldr	r3, [pc, #448]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d103      	bne.n	800319a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
       ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d13f      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e03c      	b.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d00c      	beq.n	80031c2 <RCCEx_PLLSAI2_Config+0x5a>
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d013      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x6c>
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d120      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b0:	4b61      	ldr	r3, [pc, #388]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e01a      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c2:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d2:	e013      	b.n	80031fc <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d4:	4b58      	ldr	r3, [pc, #352]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e0:	4b55      	ldr	r3, [pc, #340]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f0:	e006      	b.n	8003200 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      break;
 80031f6:	e004      	b.n	8003202 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003200:	bf00      	nop
    }

    if(status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f023 0203 	bic.w	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4948      	ldr	r1, [pc, #288]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 8086 	bne.w	800332e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003222:	4b45      	ldr	r3, [pc, #276]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a44      	ldr	r2, [pc, #272]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322e:	f7fd fa89 	bl	8000744 <HAL_GetTick>
 8003232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003234:	e009      	b.n	800324a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003236:	f7fd fa85 	bl	8000744 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d902      	bls.n	800324a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	73fb      	strb	r3, [r7, #15]
        break;
 8003248:	e005      	b.n	8003256 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ef      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d168      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003262:	4b35      	ldr	r3, [pc, #212]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6892      	ldr	r2, [r2, #8]
 800326e:	0211      	lsls	r1, r2, #8
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68d2      	ldr	r2, [r2, #12]
 8003274:	06d2      	lsls	r2, r2, #27
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6852      	ldr	r2, [r2, #4]
 800327c:	3a01      	subs	r2, #1
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	430a      	orrs	r2, r1
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	614b      	str	r3, [r1, #20]
 8003288:	e02d      	b.n	80032e6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d115      	bne.n	80032bc <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003290:	4b29      	ldr	r3, [pc, #164]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6912      	ldr	r2, [r2, #16]
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0552      	lsls	r2, r2, #21
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6852      	ldr	r2, [r2, #4]
 80032ae:	3a01      	subs	r2, #1
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	430a      	orrs	r2, r1
 80032b4:	4920      	ldr	r1, [pc, #128]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	614b      	str	r3, [r1, #20]
 80032ba:	e014      	b.n	80032e6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	0211      	lsls	r1, r2, #8
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6952      	ldr	r2, [r2, #20]
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6852      	ldr	r2, [r2, #4]
 80032da:	3a01      	subs	r2, #1
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	430a      	orrs	r2, r1
 80032e0:	4915      	ldr	r1, [pc, #84]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd fa27 	bl	8000744 <HAL_GetTick>
 80032f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032f8:	e009      	b.n	800330e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032fa:	f7fd fa23 	bl	8000744 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d902      	bls.n	800330e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	73fb      	strb	r3, [r7, #15]
          break;
 800330c:	e005      	b.n	800331a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <RCCEx_PLLSAI2_Config+0x1d0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	07ff800f 	.word	0x07ff800f
 8003340:	ff9f800f 	.word	0xff9f800f
 8003344:	f9ff800f 	.word	0xf9ff800f

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4e0d      	ldr	r6, [pc, #52]	; (8003380 <__libc_init_array+0x38>)
 800334c:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 800334e:	1ba4      	subs	r4, r4, r6
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	2500      	movs	r5, #0
 8003354:	42a5      	cmp	r5, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	4e0b      	ldr	r6, [pc, #44]	; (8003388 <__libc_init_array+0x40>)
 800335a:	4c0c      	ldr	r4, [pc, #48]	; (800338c <__libc_init_array+0x44>)
 800335c:	f000 f820 	bl	80033a0 <_init>
 8003360:	1ba4      	subs	r4, r4, r6
 8003362:	10a4      	asrs	r4, r4, #2
 8003364:	2500      	movs	r5, #0
 8003366:	42a5      	cmp	r5, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003370:	4798      	blx	r3
 8003372:	3501      	adds	r5, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800337a:	4798      	blx	r3
 800337c:	3501      	adds	r5, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	080033f8 	.word	0x080033f8
 8003384:	080033f8 	.word	0x080033f8
 8003388:	080033f8 	.word	0x080033f8
 800338c:	080033fc 	.word	0x080033fc

08003390 <memset>:
 8003390:	4402      	add	r2, r0
 8003392:	4603      	mov	r3, r0
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	f803 1b01 	strb.w	r1, [r3], #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
